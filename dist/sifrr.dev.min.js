/*! sifrr.dev v0.0.1-rc2 - sifrr project | MIT licensed | https://github.com/sifrr/sifrr-dev */
"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});const fs=_interopDefault(require("fs")),path=_interopDefault(require("path")),rollupPluginBabel=_interopDefault(require("rollup-plugin-babel")),rollupPluginTerser=_interopDefault(require("rollup-plugin-terser")),rollupPluginNodeResolve=_interopDefault(require("rollup-plugin-node-resolve")),rollupPluginCommonjs=_interopDefault(require("rollup-plugin-commonjs")),rollupPluginCleanup=_interopDefault(require("rollup-plugin-cleanup")),conventionalChangelog=_interopDefault(require("conventional-changelog")),child_process=_interopDefault(require("child_process")),mocha=_interopDefault(require("mocha")),istanbulLibInstrument=_interopDefault(require("istanbul-lib-instrument")),server$1=_interopDefault(require("@sifrr/server")),chai$1=_interopDefault(require("chai")),sinon=_interopDefault(require("sinon")),chaiAsPromised=_interopDefault(require("chai-as-promised")),puppeteer=_interopDefault(require("puppeteer")),inspector=_interopDefault(require("inspector")),istanbulLibHook=_interopDefault(require("istanbul-lib-hook"));var eslintrc={env:{browser:!0,node:!0,es6:!0,mocha:!0},globals:{ENV:!0,chai:!1,sinon:!1,assert:!1,expect:!1,should:!1,delay:!1,port:!1,PATH:!1,SPATH:!1,page:!1,browser:!1},extends:"eslint:recommended",parserOptions:{sourceType:"module",ecmaVersion:2017,esversion:2017},rules:{indent:["error",2],"linebreak-style":["error","unix"],quotes:["error","single",{avoidEscape:!0,allowTemplateLiterals:!0}],semi:["warn","always"],"quote-props":["error","as-needed"],"no-var":["error"],"max-lines":["error",220],"mocha/no-exclusive-tests":"error"},plugins:["html","mocha"],settings:{"html/indent":"+2"}};function loadDir({dir:e,onFile:r=(()=>{}),onDir:o=(()=>{}),deep:t=100}={}){return!(!fs.existsSync(e)||!fs.statSync(e).isDirectory())&&(fs.readdirSync(e).forEach(s=>{const n=path.join(e,s);fs.statSync(n).isDirectory()?t>0&&(o(n),loadDir({dir:n,onFile:r,onDir:o,deep:t-1})):r(n)}),!0)}var loaddir=loadDir;function type(e){return null===e?"null":"object"==typeof e&&Array.isArray(e)?"array":typeof e}function deepMerge(e,r,o=!1){switch(type(e)){case"array":return o?[...e,...r]:[...r];case"object":return Object.keys(r).forEach(t=>{e[t]=deepMerge(e[t],r[t],o)}),e;default:return void 0===r?e:r}}var deepmerge=deepMerge;const terser=rollupPluginTerser.terser;function moduleConfig({name:e,inputFile:r,outputFolder:o,minify:t=!1,type:s="cjs",outputFileName:n},i){const a=path.basename(r).slice(0,path.basename(r).lastIndexOf(".")).toLowerCase(),l="cjs"===s?"cjs":"browser"===s?"umd":"es",c={input:r,output:{file:path.join(o,`./${(n||a)+("module"===s?".module":"")+(t?".min":"")}.js`),format:l,name:e,sourcemap:!t,preferConst:!0,exports:"named"},plugins:[rollupPluginNodeResolve({browser:"browser"===s,mainFields:["module","main"]}),rollupPluginCommonjs()]};return"module"!==s&&c.plugins.push(rollupPluginBabel({exclude:"node_modules/**",rootMode:"upward"})),c.plugins.push(rollupPluginCleanup()),t&&c.plugins.push(terser({output:{comments:"all"}})),deepmerge(c,i,!0)}var getrollupconfig=moduleConfig;const rtag=/tag:\s*[v=]?(.+?)[,)]/gi;var generatechangelog=({folder:e=process.cwd(),releaseCount:r=0,changelogFile:o=path.join(e,"./CHANGELOG.md"),outputUnreleased:t=!1,multiRepo:s=!1}={})=>{let n="";const i=function(e,r){let o=rtag.exec(e.gitTags);rtag.lastIndex=0,o&&(e.version=o[1]),r(null,e)},a={pkg:{path:path.join(e,"./package.json")},preset:"angular",releaseCount:r,outputUnreleased:t,gitRawCommitsOpts:{path:e},transform:i};return fs.existsSync(o)&&(0===r&&fs.writeFileSync(o,""),n=fs.readFileSync(o,"utf-8")),s&&(a.transform=(e,r)=>{e.scope&&e.scope===s?e.scope=null:e.type="chore",i(e,r)}),new Promise((e,r)=>{conventionalChangelog(a).pipe(fs.createWriteStream(o)).on("error",r).on("finish",()=>{fs.appendFileSync(o,n),e(o)})})};const spawn=child_process.spawn,execa=child_process.exec;function exec(e,r={}){return process.stdout.write(`Running command: ${e} \n`),0===e.indexOf("sh ")?(r.stdio=r.stdio||"inherit",new Promise((o,t)=>{const[s,...n]=e.split(" ");spawn(s,n,r).on("close",r=>{0!==r?(process.stdout.write(`Command exited with code ${r}: ${e} \n`),t(r)):(process.stdout.write(`Finished command: ${e} \n`),o())})})):new Promise((o,t)=>{execa(e,r,(r,s,n)=>{s&&process.stdout.write(`out: ${s} \n`),n&&process.stderr.write(`err: ${n} \n`),null!==r&&(process.stderr.write(`exec error: ${r}`),t(r)),o({stdout:s,stderr:n}),process.stdout.write(`Finished command: ${e} \n`)})})}var exec_1=exec,commonjsGlobal="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function commonjsRequire(){throw new Error("Dynamic requires are not currently supported by rollup-plugin-commonjs")}async function checkTag(e,r="v"){const o=r+(e=e||commonjsRequire(path.resolve("./package.json")).version);return await exec_1("git pull"),exec_1(`git rev-parse ${o}`).then(()=>(process.stdout.write(`Tag ${o} already exists.`),!0)).catch(async()=>!1)}var checktag=checkTag;async function releaseTag(e,r="v"){const o=r+(e=e||commonjsRequire(path.resolve("./package.json")).version);return!await checktag(e,r)&&(await exec_1(`git tag -a ${o} -m "Release of ${o}"`),process.stdout.write("\n"),await exec_1(`git push origin ${o}`),!0)}var releasetag=releaseTag,gitaddcommitpush=async function({preCommand:e=!1,files:r="*",commitMsg:o="chore: add new files",push:t=!0}={}){if(e)if(Array.isArray(e))for(let r=0;r<e.length;r++)await exec_1(e[r]);else await exec_1(e);if(Array.isArray(r))for(let e=0;e<r.length;e++)await exec_1(`git ls-files '${r[e]}' | xargs git add`);else await exec_1(`git ls-files '${r}' | xargs git add`);await exec_1(`git commit -m "${o}"`).then(()=>{t&&exec_1("git push")}).catch(()=>{process.stdout.write("Nothing to commit, not running git push. \n")})};const instrumenter=istanbulLibInstrument.createInstrumenter(),{App:App,SSLApp:SSLApp}=server$1;function staticInstrument(e,r,o=!1){loaddir({dir:r,onFile:t=>{o&&".js"===t.slice(-3)?e.get("/"+path.relative(r,t),e=>{e.onAborted(commonjsGlobal.console.log);const r=fs.readFileSync(t,"utf-8");fs.existsSync(t+".map")?(e.writeHeader("content-type","application/javascript; charset=UTF-8"),e.end(instrumenter.instrumentSync(r,t,JSON.parse(fs.readFileSync(t+".map"))))):(e.writeHeader("content-type","application/javascript; charset=UTF-8"),e.end(r))}):e.file("/"+path.relative(r,t),t)}})}var server=async function(e,{extraStaticFolders:r=[],setGlobals:o=!0,coverage:t=!0,port:s=!1,securePort:n=!1}={}){const i=[];function a(o,s){staticInstrument(o,e,t),staticInstrument(o,path.join(e,"../../dist"),t),r.forEach(e=>{staticInstrument(o,e,t)}),i.push(()=>{o.listen(s,r=>{r?commonjsGlobal.console.log(`Test server listening on port ${s}, serving ${e}`):commonjsGlobal.console.log("Test server failed to listen to port "+s)})})}let l,c;if(o&&s&&(commonjsGlobal.PATH=`http://localhost:${s}`,commonjsGlobal.port=s),s){let r;fs.existsSync(path.join(e,"server.js"))?r=commonjsRequire(path.join(e,"server.js")):a(r=new App,s),l=r}if(o&&n&&(commonjsGlobal.SPATH=`https://localhost:${n}`,commonjsGlobal.securePort=n),n){let r;fs.existsSync(path.join(e,"secureserver.js"))?r=commonjsRequire(path.join(e,"secureserver.js")):a(r=new SSLApp({key_file_name:path.join(__dirname,"keys/server.key"),cert_file_name:path.join(__dirname,"keys/server.crt")}),n),c=r}return{secureApp:c,app:l,listen:()=>{i.forEach(e=>e())},close:()=>{c&&c.close&&c.close(),l&&l.close&&l.close()}}},testglobals=()=>{commonjsGlobal.ENV=process.env.NODE_ENV=process.env.NODE_ENV||"test",commonjsGlobal.Mocha=mocha,commonjsGlobal.chai=chai$1,commonjsGlobal.sinon=commonjsGlobal.sinon||sinon.createSandbox(),commonjsGlobal.assert=chai.assert,commonjsGlobal.expect=chai.expect,commonjsGlobal.should=chai.should(),commonjsGlobal.delay=e=>new Promise(r=>{setTimeout(function(){r()},1e3*e)}),chai.use(chaiAsPromised)},_0777=parseInt("0777",8),mkdirp=mkdirP.mkdirp=mkdirP.mkdirP=mkdirP;function mkdirP(e,r,o,t){"function"==typeof r?(o=r,r={}):r&&"object"==typeof r||(r={mode:r});var s=r.mode,n=r.fs||fs;void 0===s&&(s=_0777&~process.umask()),t||(t=null);var i=o||function(){};e=path.resolve(e),n.mkdir(e,s,function(o){if(!o)return i(null,t=t||e);switch(o.code){case"ENOENT":mkdirP(path.dirname(e),r,function(o,t){o?i(o,t):mkdirP(e,r,i,t)});break;default:n.stat(e,function(e,r){e||!r.isDirectory()?i(o,t):i(null,t)})}})}mkdirP.sync=function e(r,o,t){o&&"object"==typeof o||(o={mode:o});var s=o.mode,n=o.fs||fs;void 0===s&&(s=_0777&~process.umask()),t||(t=null),r=path.resolve(r);try{n.mkdirSync(r,s),t=t||r}catch(s){switch(s.code){case"ENOENT":t=e(path.dirname(r),o,t),e(r,o,t);break;default:var i;try{i=n.statSync(r)}catch(e){throw s}if(!i.isDirectory())throw s}}return t};var writecoverage=function(e,r){mkdirp.sync(path.dirname(r),e=>{if(e)throw e});const o=JSON.stringify(e||{});"{}"!==o&&fs.writeFileSync(r,o,e=>{if(e)throw e})},loadbrowser=async function(e,r){commonjsGlobal.browser&&await commonjsGlobal.browser.close();const o=await puppeteer.launch({args:["--no-sandbox","--disable-setuid-sandbox"],ignoreHTTPSErrors:!0,headless:"false"!==process.env.HEADLESS,devtools:!1}),t=await o.newPage(),s=path.join(e,"./.nyc_output");function n(e){e.goto=async(r,o)=>{const t=await e.evaluate(()=>window.__coverage__);return writecoverage(t,path.join(s,`./${Date.now()}-browser-coverage.json`)),e.mainFrame().goto(r,o)}}return await t.setViewport({width:1280,height:800}),r&&(o.__newPage=o.newPage,o.newPage=async()=>{n(await o.__newPage())},o.__close=o.close,o.close=async()=>{const e=await t.evaluate(()=>window.__coverage__);return writecoverage(e,path.join(s,`./${Date.now()}-browser-coverage.json`)),o.__close()},n(t)),commonjsGlobal.browser=o,commonjsGlobal.page=t,{browser:o,page:t}};function loadTests(e,r,o,t){loaddir({dir:e,onFile:e=>{t.map(r=>e.indexOf(r)>=0).indexOf(!0)>=0&&e.match(o)&&r.addFile(e)}})}var run=async function({root:e=path.resolve("./"),serverOnly:r=!1,runUnitTests:o=!0,runBrowserTests:t=!0,coverage:s=!1,setGlobals:n=!0,testFileRegex:i=/\.test\.js$/,filters:a=[""],folders:l={},preCommand:c=[],port:u=8888,securePort:p=!1,useJunitReporter:d=!1,junitXmlFile:m=path.join(e,`./test-results/${path.basename(e)}/results.xml`),inspect:f=!1}={}){if(f&&inspector.open(void 0,void 0,!0),deepmerge(l,{unitTest:path.join(e,"./test/unit"),browserTest:path.join(e,"./test/browser"),public:path.join(e,"./test/public"),static:[]},!0),Array.isArray(c))for(let e=0;e<c.length;e++)await exec_1(c[e]).catch(commonjsGlobal.console.error);else await exec_1(c).catch(commonjsGlobal.console.error);const g=await server(l.public,{extraStaticFolders:l.static,setGlobals:n,coverage:s,port:u,securePort:p});if(r)return void g.listen();if(n&&testglobals(),s&&!commonjsGlobal.cov){const{createInstrumenter:r}=istanbulLibInstrument,o=r(),{hookRequire:t}=istanbulLibHook;t(r=>r.indexOf(e+"src")>-1,(e,{filename:r})=>o.instrumentSync(e,r)),commonjsGlobal.cov=!0}const h={timeout:1e4};d&&(h.reporter="mocha-junit-reporter",h.reporterOptions={mochaFile:m});const _=new mocha(h);!t&&o||(g.listen(),await loadbrowser(e,s),loadTests(l.browserTest,_,i,a)),!o&&t||loadTests(l.unitTest,_,i,a),_.run(async r=>{g.close(),r&&(process.stdout.write(`---------- ${r} FAILURES. ----------\n`),process.exitCode=1),commonjsGlobal.browser&&await browser.close(),s&&writecoverage(commonjsGlobal.__coverage__,path.join(e,"./.nyc_output",`./${Date.now()}-unit-coverage.json`)),process.exit(process.exitCode)})},sifrr_dev={eslintrc:eslintrc,loadDir:loaddir,deepMerge:deepmerge,getRollupConfig:getrollupconfig,generateChangelog:generatechangelog,exec:exec_1,checkTag:checktag,releaseTag:releasetag,gitAddCommitPush:gitaddcommitpush,runTests:run},sifrr_dev_1=sifrr_dev.eslintrc,sifrr_dev_2=sifrr_dev.loadDir,sifrr_dev_3=sifrr_dev.deepMerge,sifrr_dev_4=sifrr_dev.getRollupConfig,sifrr_dev_5=sifrr_dev.generateChangelog,sifrr_dev_6=sifrr_dev.exec,sifrr_dev_7=sifrr_dev.checkTag,sifrr_dev_8=sifrr_dev.releaseTag,sifrr_dev_9=sifrr_dev.gitAddCommitPush,sifrr_dev_10=sifrr_dev.runTests;exports.checkTag=sifrr_dev_7,exports.deepMerge=sifrr_dev_3,exports.default=sifrr_dev,exports.eslintrc=sifrr_dev_1,exports.exec=sifrr_dev_6,exports.generateChangelog=sifrr_dev_5,exports.getRollupConfig=sifrr_dev_4,exports.gitAddCommitPush=sifrr_dev_9,exports.loadDir=sifrr_dev_2,exports.releaseTag=sifrr_dev_8,exports.runTests=sifrr_dev_10;
/*! (c) @aadityataparia */
